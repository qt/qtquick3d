// Copyright (C) 2014 NVIDIA Corporation.
// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only

#ifndef SHADOW_MAPPING_GLSLLIB
#define SHADOW_MAPPING_GLSLLIB

#include "depthpass.glsllib"

float qt_sampleCubemap( in samplerCube shadowCube, in ShadowData shadowData, in vec3 lightPos, in vec3 worldPos )
{
    float dist = length(worldPos - lightPos);
    float currentDepth = clamp((dist - shadowData.clipNear) / (shadowData.shadowMapFar - shadowData.clipNear), 0.0, 1.0);
    vec3 smpCoord = worldPos - lightPos;

    // reverse Y if shadowData.isYUp == 1 (not enough on its own, also expects +Y and -Y swapped in shadowCube)
    smpCoord.y = mix(smpCoord.y, -smpCoord.y, shadowData.isYUp);

    float sampleDepth = texture( shadowCube, smpCoord ).x + shadowData.bias;
    return min(1.0, exp(shadowData.factor * sampleDepth) / exp(shadowData.factor * currentDepth));
}

float qt_sampleOrthographic( in sampler2D shadowMap, in ShadowData shadowData, in vec3 worldPos )
{
    vec4 projCoord = shadowData.matrix * vec4( worldPos, 1.0 );
    vec3 smpCoord = projCoord.xyz / projCoord.w;
    smpCoord.y = mix(smpCoord.y, 1.0 - smpCoord.y, shadowData.isYUp);

    float sampleDepth = texture( shadowMap, smpCoord.xy ).x + shadowData.bias;

    return min(1.0, exp(shadowData.factor * sampleDepth) / exp(shadowData.factor * smpCoord.z));
}

#endif
